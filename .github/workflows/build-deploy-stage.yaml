name: Build and Deploy
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
          ref: main
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create ENV file
        run: |
          touch .env
          echo APP_DB_USER=${{ secrets.ENV_APP_DB_USER }} >> .env
          echo APP_DB_PASS=${{ secrets.ENV_APP_DB_PASS }} >> .env
          echo APP_DB_NAME=${{ secrets.ENV_APP_DB_NAME }} >> .env
          echo DB_HOST=${{ secrets.ENV_DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.ENV_DB_PORT }} >> .env
          echo DB_TYPE=${{ secrets.ENV_DB_TYPE }} >> .env
          echo APP_ENV=${{ secrets.ENV_APP_ENV }} >> .env
          echo APP_PORT=${{ secrets.ENV_APP_PORT }} >> .env
      - name: Add API image tag into GitHub env
        run: |
          echo OWNER=${{ secrets.DOCKERHUB_USER }} >> $GITHUB_ENV
          echo IMAGE_API_NAME=${{ secrets.DEPLOY_ENV_API_IMAGE_NAME }} >> $GITHUB_ENV
          echo MAJOR_API_TAG=${{ secrets.DEPLOY_ENV_API_IMAGE_MAJOR_TAG }} >> $GITHUB_ENV
          echo MINOR_API_TAG=${{ secrets.DEPLOY_ENV_API_IMAGE_MINOR_TAG }} >> $GITHUB_ENV
  copy-scripts:
    name: Filter Updated Path
    runs-on: ubuntu-latest
    env:
      REMOTE_FOLDER: scripts
      LOCAL_FOLDER: scripts
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
          ref: main
      - name: Getting sha for last release
        id: last-release
        shell: bash
        run: |
          tag=`git tag --sort=creatordate | tail -2 | sed -n '1p'`
          echo "Tag: $tag"
          sha=`git show-ref --tags | grep $tag | awk '{print $1;}'`
          echo "SHA: $sha"
          echo "::set-output name=sha::$sha"
        env:
          GITHUB_TOKEN: ${{secrets.REPOSITORY_ACCESS_TOKEN}}
      - name: Check path updated
        uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ steps.last-release.outputs.sha }}
          filters: |
            scripts:
              - scripts/**
      - name: Echo when deployment script changed
        if: steps.filter.outputs.scripts == 'true'
        run: echo "deployment script changed"
      - name: Copy file to remote server if deployment script changed
        if: steps.filter.outputs.scripts == 'true'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_API_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          privateKey: ${{ secrets.SSH_KEY }}
          local: ${{ env.LOCAL_FOLDER }}
          remote: ${{ env.REMOTE_FOLDER }}
  deploy:
    name: Deploy Server
    needs: build
    runs-on: ubuntu-latest
    env:
      BASH_SCRIPT: init-service.sh
      COMPOSE_FILE: docker-compose.apiprod.yml
      REMOTE_FOLDER: scripts
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
          ref: main
      - name: Executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_API_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            export PASSWORD=${{ secrets.SSH_PASSWORD }}
            export API_IMAGE_NAME=${{ secrets.DEPLOY_ENV_API_IMAGE_NAME }}
            export API_IMAGE_MINOR_TAG=${{ secrets.DEPLOY_ENV_API_IMAGE_MINOR_TAG }}
            export API_IMAGE_MAJOR_TAG=${{ secrets.DEPLOY_ENV_API_IMAGE_MAJOR_TAG }}
            export APP_PORT=${{ secrets.ENV_APP_PORT }}
            export DOCKERHUB_USER=${{ secrets.DOCKERHUB_USER }}
            export COMPOSE_FILE=${{ env.COMPOSE_FILE }}
            cd ${{ env.REMOTE_FOLDER }}
            bash ${{ env.BASH_SCRIPT }}
      - name: Update API Minor version
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: "DEPLOY_ENV_API_IMAGE_MINOR_TAG"
          value: $((${{ secrets.DEPLOY_ENV_API_IMAGE_MINOR_TAG }}+1))
          repository: ${{ secrets.REPOSITORY_PATH }}
          token: ${{ secrets.REPOSITORY_ACCESS_TOKEN }}
